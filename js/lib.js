/**
 * @license
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Rhys Brett-Bowen
 */
var debounce = function(func, wait) {
  // we need to save these in the closure
  var timeout, args, context, timestamp;

  return function() {

    // save details of latest call
    context = this;
    args = [].slice.call(arguments, 0);
    timestamp = new Date();

    // this is where the magic happens
    var later = function() {

      // how long ago was the last call
      var last = (new Date()) - timestamp;

      // if the latest call was less that the wait period ago
      // then we reset the timeout to wait for the difference
      if (last < wait) {
        timeout = setTimeout(later, wait - last);

      // or if not we can null out the timer and run the latest
      } else {
        timeout = null;
        func.apply(context, args);
      }
    };

    // we only need to set the timer now if one isn't already running
    if (!timeout) {
      timeout = setTimeout(later, wait);
    }
  }
};

// Generated by CoffeeScript 1.9.3
(function(){var e;e=function(){function e(e,t){var n,r;this.options={target:"instafeed",get:"popular",resolution:"thumbnail",sortBy:"none",links:!0,mock:!1,useHttp:!1};if(typeof e=="object")for(n in e)r=e[n],this.options[n]=r;this.context=t!=null?t:this,this.unique=this._genKey()}return e.prototype.hasNext=function(){return typeof this.context.nextUrl=="string"&&this.context.nextUrl.length>0},e.prototype.next=function(){return this.hasNext()?this.run(this.context.nextUrl):!1},e.prototype.run=function(t){var n,r,i;if(typeof this.options.clientId!="string"&&typeof this.options.accessToken!="string")throw new Error("Missing clientId or accessToken.");if(typeof this.options.accessToken!="string"&&typeof this.options.clientId!="string")throw new Error("Missing clientId or accessToken.");return this.options.before!=null&&typeof this.options.before=="function"&&this.options.before.call(this),typeof document!="undefined"&&document!==null&&(i=document.createElement("script"),i.id="instafeed-fetcher",i.src=t||this._buildUrl(),n=document.getElementsByTagName("head"),n[0].appendChild(i),r="instafeedCache"+this.unique,window[r]=new e(this.options,this),window[r].unique=this.unique),!0},e.prototype.parse=function(e){var t,n,r,i,s,o,u,a,f,l,c,h,p,d,v,m,g,y,b,w,E,S,x,T,N,C,k,L,A,O,M,_,D;if(typeof e!="object"){if(this.options.error!=null&&typeof this.options.error=="function")return this.options.error.call(this,"Invalid JSON data"),!1;throw new Error("Invalid JSON response")}if(e.meta.code!==200){if(this.options.error!=null&&typeof this.options.error=="function")return this.options.error.call(this,e.meta.error_message),!1;throw new Error("Error from Instagram: "+e.meta.error_message)}if(e.data.length===0){if(this.options.error!=null&&typeof this.options.error=="function")return this.options.error.call(this,"No images were returned from Instagram"),!1;throw new Error("No images were returned from Instagram")}this.options.success!=null&&typeof this.options.success=="function"&&this.options.success.call(this,e),this.context.nextUrl="",e.pagination!=null&&(this.context.nextUrl=e.pagination.next_url);if(this.options.sortBy!=="none"){this.options.sortBy==="random"?M=["","random"]:M=this.options.sortBy.split("-"),O=M[0]==="least"?!0:!1;switch(M[1]){case"random":e.data.sort(function(){return.5-Math.random()});break;case"recent":e.data=this._sortBy(e.data,"created_time",O);break;case"liked":e.data=this._sortBy(e.data,"likes.count",O);break;case"commented":e.data=this._sortBy(e.data,"comments.count",O);break;default:throw new Error("Invalid option for sortBy: '"+this.options.sortBy+"'.")}}if(typeof document!="undefined"&&document!==null&&this.options.mock===!1){m=e.data,A=parseInt(this.options.limit,10),this.options.limit!=null&&m.length>A&&(m=m.slice(0,A)),u=document.createDocumentFragment(),this.options.filter!=null&&typeof this.options.filter=="function"&&(m=this._filter(m,this.options.filter));if(this.options.template!=null&&typeof this.options.template=="string"){f="",d="",w="",D=document.createElement("div");for(c=0,N=m.length;c<N;c++){h=m[c],p=h.images[this.options.resolution];if(typeof p!="object")throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);E=p.width,y=p.height,b="square",E>y&&(b="landscape"),E<y&&(b="portrait"),v=p.url,l=window.location.protocol.indexOf("http")>=0,l&&!this.options.useHttp&&(v=v.replace(/https?:\/\//,"//")),d=this._makeTemplate(this.options.template,{model:h,id:h.id,link:h.link,type:h.type,image:v,width:E,height:y,orientation:b,caption:this._getObjectProperty(h,"caption.text"),likes:h.likes.count,comments:h.comments.count,location:this._getObjectProperty(h,"location.name")}),f+=d}D.innerHTML=f,i=[],r=0,n=D.childNodes.length;while(r<n)i.push(D.childNodes[r]),r+=1;for(x=0,C=i.length;x<C;x++)L=i[x],u.appendChild(L)}else for(T=0,k=m.length;T<k;T++){h=m[T],g=document.createElement("img"),p=h.images[this.options.resolution];if(typeof p!="object")throw o="No image found for resolution: "+this.options.resolution+".",new Error(o);v=p.url,l=window.location.protocol.indexOf("http")>=0,l&&!this.options.useHttp&&(v=v.replace(/https?:\/\//,"//")),g.src=v,this.options.links===!0?(t=document.createElement("a"),t.href=h.link,t.appendChild(g),u.appendChild(t)):u.appendChild(g)}_=this.options.target,typeof _=="string"&&(_=document.getElementById(_));if(_==null)throw o='No element with id="'+this.options.target+'" on page.',new Error(o);_.appendChild(u),a=document.getElementsByTagName("head")[0],a.removeChild(document.getElementById("instafeed-fetcher")),S="instafeedCache"+this.unique,window[S]=void 0;try{delete window[S]}catch(P){s=P}}return this.options.after!=null&&typeof this.options.after=="function"&&this.options.after.call(this),!0},e.prototype._buildUrl=function(){var e,t,n;e="https://api.instagram.com/v1";switch(this.options.get){case"popular":t="media/popular";break;case"tagged":if(!this.options.tagName)throw new Error("No tag name specified. Use the 'tagName' option.");t="tags/"+this.options.tagName+"/media/recent";break;case"location":if(!this.options.locationId)throw new Error("No location specified. Use the 'locationId' option.");t="locations/"+this.options.locationId+"/media/recent";break;case"user":if(!this.options.userId)throw new Error("No user specified. Use the 'userId' option.");t="users/"+this.options.userId+"/media/recent";break;default:throw new Error("Invalid option for get: '"+this.options.get+"'.")}return n=e+"/"+t,this.options.accessToken!=null?n+="?access_token="+this.options.accessToken:n+="?client_id="+this.options.clientId,this.options.limit!=null&&(n+="&count="+this.options.limit),n+="&callback=instafeedCache"+this.unique+".parse",n},e.prototype._genKey=function(){var e;return e=function(){return((1+Math.random())*65536|0).toString(16).substring(1)},""+e()+e()+e()+e()},e.prototype._makeTemplate=function(e,t){var n,r,i,s,o;r=/(?:\{{2})([\w\[\]\.]+)(?:\}{2})/,n=e;while(r.test(n))s=n.match(r)[1],o=(i=this._getObjectProperty(t,s))!=null?i:"",n=n.replace(r,function(){return""+o});return n},e.prototype._getObjectProperty=function(e,t){var n,r;t=t.replace(/\[(\w+)\]/g,".$1"),r=t.split(".");while(r.length){n=r.shift();if(!(e!=null&&n in e))return null;e=e[n]}return e},e.prototype._sortBy=function(e,t,n){var r;return r=function(e,r){var i,s;return i=this._getObjectProperty(e,t),s=this._getObjectProperty(r,t),n?i>s?1:-1:i<s?1:-1},e.sort(r.bind(this)),e},e.prototype._filter=function(e,t){var n,r,i,s,o;n=[],r=function(e){if(t(e))return n.push(e)};for(i=0,o=e.length;i<o;i++)s=e[i],r(s);return n},e}(),function(e,t){return typeof define=="function"&&define.amd?define([],t):typeof module=="object"&&module.exports?module.exports=t():e.Instafeed=t()}(this,function(){return e})}).call(this);

!function(t,i,e){"use strict";function s(t,i){this.element=t,this.layers=t.getElementsByClassName("layer");var e={calibrateX:this.data(this.element,"calibrate-x"),calibrateY:this.data(this.element,"calibrate-y"),invertX:this.data(this.element,"invert-x"),invertY:this.data(this.element,"invert-y"),limitX:this.data(this.element,"limit-x"),limitY:this.data(this.element,"limit-y"),scalarX:this.data(this.element,"scalar-x"),scalarY:this.data(this.element,"scalar-y"),frictionX:this.data(this.element,"friction-x"),frictionY:this.data(this.element,"friction-y"),originX:this.data(this.element,"origin-x"),originY:this.data(this.element,"origin-y")};for(var s in e)null===e[s]&&delete e[s];this.extend(this,r,i,e),this.calibrationTimer=null,this.calibrationFlag=!0,this.enabled=!1,this.depths=[],this.raf=null,this.bounds=null,this.ex=0,this.ey=0,this.ew=0,this.eh=0,this.ecx=0,this.ecy=0,this.erx=0,this.ery=0,this.cx=0,this.cy=0,this.ix=0,this.iy=0,this.mx=0,this.my=0,this.vx=0,this.vy=0,this.onMouseMove=this.onMouseMove.bind(this),this.onDeviceOrientation=this.onDeviceOrientation.bind(this),this.onOrientationTimer=this.onOrientationTimer.bind(this),this.onCalibrationTimer=this.onCalibrationTimer.bind(this),this.onAnimationFrame=this.onAnimationFrame.bind(this),this.onWindowResize=this.onWindowResize.bind(this),this.initialise()}var n="Parallax",o=30,r={relativeInput:!1,clipRelativeInput:!1,calibrationThreshold:100,calibrationDelay:500,supportDelay:500,calibrateX:!1,calibrateY:!0,invertX:!0,invertY:!0,limitX:!1,limitY:!1,scalarX:10,scalarY:10,frictionX:.1,frictionY:.1,originX:.5,originY:.5};s.prototype.extend=function(){if(arguments.length>1)for(var t=arguments[0],i=1,e=arguments.length;e>i;i++){var s=arguments[i];for(var n in s)t[n]=s[n]}},s.prototype.data=function(t,i){return this.deserialize(t.getAttribute("data-"+i))},s.prototype.deserialize=function(t){return"true"===t?!0:"false"===t?!1:"null"===t?null:!isNaN(parseFloat(t))&&isFinite(t)?parseFloat(t):t},s.prototype.camelCase=function(t){return t.replace(/-+(.)?/g,function(t,i){return i?i.toUpperCase():""})},s.prototype.transformSupport=function(s){for(var n=i.createElement("div"),o=!1,r=null,a=!1,h=null,l=null,p=0,c=this.vendors.length;c>p;p++)if(null!==this.vendors[p]?(h=this.vendors[p][0]+"transform",l=this.vendors[p][1]+"Transform"):(h="transform",l="transform"),n.style[l]!==e){o=!0;break}switch(s){case"2D":a=o;break;case"3D":if(o){var m=i.body||i.createElement("body"),u=i.documentElement,y=u.style.overflow;i.body||(u.style.overflow="hidden",u.appendChild(m),m.style.overflow="hidden",m.style.background=""),m.appendChild(n),n.style[l]="translate3d(1px,1px,1px)",r=t.getComputedStyle(n).getPropertyValue(h),a=r!==e&&r.length>0&&"none"!==r,u.style.overflow=y,m.removeChild(n)}}return a},s.prototype.ww=null,s.prototype.wh=null,s.prototype.wcx=null,s.prototype.wcy=null,s.prototype.wrx=null,s.prototype.wry=null,s.prototype.portrait=null,s.prototype.desktop=!navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|mobi|tablet|opera mini|nexus 7)/i),s.prototype.vendors=[null,["-webkit-","webkit"],["-moz-","Moz"],["-o-","O"],["-ms-","ms"]],s.prototype.motionSupport=!!t.DeviceMotionEvent,s.prototype.orientationSupport=!!t.DeviceOrientationEvent,s.prototype.orientationStatus=0,s.prototype.transform2DSupport=s.prototype.transformSupport("2D"),s.prototype.transform3DSupport=s.prototype.transformSupport("3D"),s.prototype.propertyCache={},s.prototype.initialise=function(){this.transform3DSupport&&this.accelerate(this.element);var i=t.getComputedStyle(this.element);"static"===i.getPropertyValue("position")&&(this.element.style.position="relative"),this.updateLayers(),this.updateDimensions(),this.enable(),this.queueCalibration(this.calibrationDelay)},s.prototype.updateLayers=function(){this.layers=this.element.getElementsByClassName("layer"),this.depths=[];for(var t=0,i=this.layers.length;i>t;t++){var e=this.layers[t];this.transform3DSupport&&this.accelerate(e),e.style.position=t?"absolute":"relative",e.style.display="block",e.style.left=0,e.style.top=0,this.depths.push(this.data(e,"depth")||0)}},s.prototype.updateDimensions=function(){this.ww=t.innerWidth,this.wh=t.innerHeight,this.wcx=this.ww*this.originX,this.wcy=this.wh*this.originY,this.wrx=Math.max(this.wcx,this.ww-this.wcx),this.wry=Math.max(this.wcy,this.wh-this.wcy)},s.prototype.updateBounds=function(){this.bounds=this.element.getBoundingClientRect(),this.ex=this.bounds.left,this.ey=this.bounds.top,this.ew=this.bounds.width,this.eh=this.bounds.height,this.ecx=this.ew*this.originX,this.ecy=this.eh*this.originY,this.erx=Math.max(this.ecx,this.ew-this.ecx),this.ery=Math.max(this.ecy,this.eh-this.ecy)},s.prototype.queueCalibration=function(t){clearTimeout(this.calibrationTimer),this.calibrationTimer=setTimeout(this.onCalibrationTimer,t)},s.prototype.enable=function(){this.enabled||(this.enabled=!0,this.orientationSupport?(this.portrait=null,t.addEventListener("deviceorientation",this.onDeviceOrientation),setTimeout(this.onOrientationTimer,this.supportDelay)):(this.cx=0,this.cy=0,this.portrait=!1,this.listenedElement=this.clipRelativeInput?this.element:t,this.listenedElement.addEventListener("mousemove",this.onMouseMove)),t.addEventListener("resize",this.onWindowResize),this.raf=requestAnimationFrame(this.onAnimationFrame))},s.prototype.disable=function(){this.enabled&&(this.enabled=!1,this.orientationSupport?t.removeEventListener("deviceorientation",this.onDeviceOrientation):this.listenedElement.removeEventListener("mousemove",this.onMouseMove),t.removeEventListener("resize",this.onWindowResize),cancelAnimationFrame(this.raf))},s.prototype.calibrate=function(t,i){this.calibrateX=t===e?this.calibrateX:t,this.calibrateY=i===e?this.calibrateY:i},s.prototype.invert=function(t,i){this.invertX=t===e?this.invertX:t,this.invertY=i===e?this.invertY:i},s.prototype.friction=function(t,i){this.frictionX=t===e?this.frictionX:t,this.frictionY=i===e?this.frictionY:i},s.prototype.scalar=function(t,i){this.scalarX=t===e?this.scalarX:t,this.scalarY=i===e?this.scalarY:i},s.prototype.limit=function(t,i){this.limitX=t===e?this.limitX:t,this.limitY=i===e?this.limitY:i},s.prototype.origin=function(t,i){this.originX=t===e?this.originX:t,this.originY=i===e?this.originY:i},s.prototype.clamp=function(t,i,e){return t=Math.max(t,i),t=Math.min(t,e)},s.prototype.css=function(t,i,s){var n=this.propertyCache[i];if(!n)for(var o=0,r=this.vendors.length;r>o;o++)if(n=null!==this.vendors[o]?this.camelCase(this.vendors[o][1]+"-"+i):i,t.style[n]!==e){this.propertyCache[i]=n;break}t.style[n]=s},s.prototype.accelerate=function(t){this.css(t,"transform","translate3d(0,0,0)")},s.prototype.setPosition=function(t,i,e){i=i.toFixed(1)+"px",e=e.toFixed(1)+"px",this.transform3DSupport?this.css(t,"transform","translate3d("+i+","+e+",0)"):this.transform2DSupport?this.css(t,"transform","translate("+i+","+e+")"):(t.style.left=i,t.style.top=e)},s.prototype.onOrientationTimer=function(){this.orientationSupport&&0===this.orientationStatus&&(this.disable(),this.orientationSupport=!1,this.enable())},s.prototype.onCalibrationTimer=function(){this.calibrationFlag=!0},s.prototype.onWindowResize=function(){this.updateDimensions()},s.prototype.onAnimationFrame=function(){this.updateBounds();var t=this.ix-this.cx,i=this.iy-this.cy;(Math.abs(t)>this.calibrationThreshold||Math.abs(i)>this.calibrationThreshold)&&this.queueCalibration(0),this.portrait?(this.mx=this.calibrateX?i:this.iy,this.my=this.calibrateY?t:this.ix):(this.mx=this.calibrateX?t:this.ix,this.my=this.calibrateY?i:this.iy),this.mx*=this.ew*(this.scalarX/100),this.my*=this.eh*(this.scalarY/100),isNaN(parseFloat(this.limitX))||(this.mx=this.clamp(this.mx,-this.limitX,this.limitX)),isNaN(parseFloat(this.limitY))||(this.my=this.clamp(this.my,-this.limitY,this.limitY)),this.vx+=(this.mx-this.vx)*this.frictionX,this.vy+=(this.my-this.vy)*this.frictionY;for(var e=0,s=this.layers.length;s>e;e++){var n=this.layers[e],o=this.depths[e],r=this.vx*o*(this.invertX?-1:1),a=this.vy*o*(this.invertY?-1:1);this.setPosition(n,r,a)}this.raf=requestAnimationFrame(this.onAnimationFrame)},s.prototype.onDeviceOrientation=function(t){if(!this.desktop&&null!==t.beta&&null!==t.gamma){this.orientationStatus=1;var i=(t.beta||0)/o,e=(t.gamma||0)/o,s=this.wh>this.ww;this.portrait!==s&&(this.portrait=s,this.calibrationFlag=!0),this.calibrationFlag&&(this.calibrationFlag=!1,this.cx=i,this.cy=e),this.ix=i,this.iy=e}},s.prototype.onMouseMove=function(t){var i=t.clientX,e=t.clientY;!this.orientationSupport&&this.relativeInput?(this.ix=(i-this.ex-this.ecx)/this.erx,this.iy=(e-this.ey-this.ecy)/this.ery):(this.ix=(i-this.wcx)/this.wrx,this.iy=(e-this.wcy)/this.wry)},t[n]=s}(window,document),function(){for(var t=0,i=["ms","moz","webkit","o"],e=0;e<i.length&&!window.requestAnimationFrame;++e)window.requestAnimationFrame=window[i[e]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i[e]+"CancelAnimationFrame"]||window[i[e]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(i){var e=(new Date).getTime(),s=Math.max(0,16-(e-t)),n=window.setTimeout(function(){i(e+s)},s);return t=e+s,n}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)})}();

(function( factory ) {
  if (typeof define !== 'undefined' && define.amd) {
    define([], factory);
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = factory();
  } else {
    window.scrollMonitor = factory();
  }
})(function() {

  var scrollTop = function() {
    return window.pageYOffset ||
      (document.documentElement && document.documentElement.scrollTop) ||
      document.body.scrollTop;
  };

  var exports = {};

  var watchers = [];

  var VISIBILITYCHANGE = 'visibilityChange';
  var ENTERVIEWPORT = 'enterViewport';
  var FULLYENTERVIEWPORT = 'fullyEnterViewport';
  var EXITVIEWPORT = 'exitViewport';
  var PARTIALLYEXITVIEWPORT = 'partiallyExitViewport';
  var LOCATIONCHANGE = 'locationChange';
  var STATECHANGE = 'stateChange';

  var eventTypes = [
    VISIBILITYCHANGE,
    ENTERVIEWPORT,
    FULLYENTERVIEWPORT,
    EXITVIEWPORT,
    PARTIALLYEXITVIEWPORT,
    LOCATIONCHANGE,
    STATECHANGE
  ];

  var defaultOffsets = {top: 0, bottom: 0};

  var getViewportHeight = function() {
    return window.innerHeight || document.documentElement.clientHeight;
  };

  var getDocumentHeight = function() {
    // jQuery approach
    // whichever is greatest
    return Math.max(
      document.body.scrollHeight, document.documentElement.scrollHeight,
      document.body.offsetHeight, document.documentElement.offsetHeight,
      document.documentElement.clientHeight
    );
  };

  exports.viewportTop = null;
  exports.viewportBottom = null;
  exports.documentHeight = null;
  exports.viewportHeight = getViewportHeight();

  var previousDocumentHeight;
  var latestEvent;

  var calculateViewportI;
  function calculateViewport() {
    exports.viewportTop = scrollTop();
    exports.viewportBottom = exports.viewportTop + exports.viewportHeight;
    exports.documentHeight = getDocumentHeight();
    if (exports.documentHeight !== previousDocumentHeight) {
      calculateViewportI = watchers.length;
      while( calculateViewportI-- ) {
        watchers[calculateViewportI].recalculateLocation();
      }
      previousDocumentHeight = exports.documentHeight;
    }
  }

  function recalculateWatchLocationsAndTrigger() {
    exports.viewportHeight = getViewportHeight();
    calculateViewport();
    updateAndTriggerWatchers();
  }

  var recalculateAndTriggerTimer;
  function debouncedRecalcuateAndTrigger() {
    clearTimeout(recalculateAndTriggerTimer);
    recalculateAndTriggerTimer = setTimeout( recalculateWatchLocationsAndTrigger, 100 );
  }

  var updateAndTriggerWatchersI;
  function updateAndTriggerWatchers() {
    // update all watchers then trigger the events so one can rely on another being up to date.
    updateAndTriggerWatchersI = watchers.length;
    while( updateAndTriggerWatchersI-- ) {
      watchers[updateAndTriggerWatchersI].update();
    }

    updateAndTriggerWatchersI = watchers.length;
    while( updateAndTriggerWatchersI-- ) {
      watchers[updateAndTriggerWatchersI].triggerCallbacks();
    }

  }

  function ElementWatcher( watchItem, offsets ) {
    var self = this;

    this.watchItem = watchItem;

    if (!offsets) {
      this.offsets = defaultOffsets;
    } else if (offsets === +offsets) {
      this.offsets = {top: offsets, bottom: offsets};
    } else {
      this.offsets = {
        top: offsets.top || defaultOffsets.top,
        bottom: offsets.bottom || defaultOffsets.bottom
      };
    }

    this.callbacks = {}; // {callback: function, isOne: true }

    for (var i = 0, j = eventTypes.length; i < j; i++) {
      self.callbacks[eventTypes[i]] = [];
    }

    this.locked = false;

    var wasInViewport;
    var wasFullyInViewport;
    var wasAboveViewport;
    var wasBelowViewport;

    var listenerToTriggerListI;
    var listener;
    function triggerCallbackArray( listeners ) {
      if (listeners.length === 0) {
        return;
      }
      listenerToTriggerListI = listeners.length;
      while( listenerToTriggerListI-- ) {
        listener = listeners[listenerToTriggerListI];
        listener.callback.call( self, latestEvent );
        if (listener.isOne) {
          listeners.splice(listenerToTriggerListI, 1);
        }
      }
    }
    this.triggerCallbacks = function triggerCallbacks() {

      if (this.isInViewport && !wasInViewport) {
        triggerCallbackArray( this.callbacks[ENTERVIEWPORT] );
      }
      if (this.isFullyInViewport && !wasFullyInViewport) {
        triggerCallbackArray( this.callbacks[FULLYENTERVIEWPORT] );
      }


      if (this.isAboveViewport !== wasAboveViewport &&
        this.isBelowViewport !== wasBelowViewport) {

        triggerCallbackArray( this.callbacks[VISIBILITYCHANGE] );

        // if you skip completely past this element
        if (!wasFullyInViewport && !this.isFullyInViewport) {
          triggerCallbackArray( this.callbacks[FULLYENTERVIEWPORT] );
          triggerCallbackArray( this.callbacks[PARTIALLYEXITVIEWPORT] );
        }
        if (!wasInViewport && !this.isInViewport) {
          triggerCallbackArray( this.callbacks[ENTERVIEWPORT] );
          triggerCallbackArray( this.callbacks[EXITVIEWPORT] );
        }
      }

      if (!this.isFullyInViewport && wasFullyInViewport) {
        triggerCallbackArray( this.callbacks[PARTIALLYEXITVIEWPORT] );
      }
      if (!this.isInViewport && wasInViewport) {
        triggerCallbackArray( this.callbacks[EXITVIEWPORT] );
      }
      if (this.isInViewport !== wasInViewport) {
        triggerCallbackArray( this.callbacks[VISIBILITYCHANGE] );
      }
      switch( true ) {
        case wasInViewport !== this.isInViewport:
        case wasFullyInViewport !== this.isFullyInViewport:
        case wasAboveViewport !== this.isAboveViewport:
        case wasBelowViewport !== this.isBelowViewport:
          triggerCallbackArray( this.callbacks[STATECHANGE] );
      }

      wasInViewport = this.isInViewport;
      wasFullyInViewport = this.isFullyInViewport;
      wasAboveViewport = this.isAboveViewport;
      wasBelowViewport = this.isBelowViewport;

    };

    this.recalculateLocation = function() {
      if (this.locked) {
        return;
      }
      var previousTop = this.top;
      var previousBottom = this.bottom;
      if (this.watchItem.nodeName) { // a dom element
        var cachedDisplay = this.watchItem.style.display;
        if (cachedDisplay === 'none') {
          this.watchItem.style.display = '';
        }

        var boundingRect = this.watchItem.getBoundingClientRect();
        this.top = boundingRect.top + exports.viewportTop;
        this.bottom = boundingRect.bottom + exports.viewportTop;

        if (cachedDisplay === 'none') {
          this.watchItem.style.display = cachedDisplay;
        }

      } else if (this.watchItem === +this.watchItem) { // number
        if (this.watchItem > 0) {
          this.top = this.bottom = this.watchItem;
        } else {
          this.top = this.bottom = exports.documentHeight - this.watchItem;
        }

      } else { // an object with a top and bottom property
        this.top = this.watchItem.top;
        this.bottom = this.watchItem.bottom;
      }

      this.top -= this.offsets.top;
      this.bottom += this.offsets.bottom;
      this.height = this.bottom - this.top;

      if ( (previousTop !== undefined || previousBottom !== undefined) && (this.top !== previousTop || this.bottom !== previousBottom) ) {
        triggerCallbackArray( this.callbacks[LOCATIONCHANGE] );
      }
    };

    this.recalculateLocation();
    this.update();

    wasInViewport = this.isInViewport;
    wasFullyInViewport = this.isFullyInViewport;
    wasAboveViewport = this.isAboveViewport;
    wasBelowViewport = this.isBelowViewport;
  }

  ElementWatcher.prototype = {
    on: function( event, callback, isOne ) {

      // trigger the event if it applies to the element right now.
      switch( true ) {
        case event === VISIBILITYCHANGE && !this.isInViewport && this.isAboveViewport:
        case event === ENTERVIEWPORT && this.isInViewport:
        case event === FULLYENTERVIEWPORT && this.isFullyInViewport:
        case event === EXITVIEWPORT && this.isAboveViewport && !this.isInViewport:
        case event === PARTIALLYEXITVIEWPORT && this.isAboveViewport:
          callback.call( this, latestEvent );
          if (isOne) {
            return;
          }
      }

      if (this.callbacks[event]) {
        this.callbacks[event].push({callback: callback, isOne: isOne||false});
      } else {
        throw new Error('Tried to add a scroll monitor listener of type '+event+'. Your options are: '+eventTypes.join(', '));
      }
    },
    off: function( event, callback ) {
      if (this.callbacks[event]) {
        for (var i = 0, item; item = this.callbacks[event][i]; i++) {
          if (item.callback === callback) {
            this.callbacks[event].splice(i, 1);
            break;
          }
        }
      } else {
        throw new Error('Tried to remove a scroll monitor listener of type '+event+'. Your options are: '+eventTypes.join(', '));
      }
    },
    one: function( event, callback ) {
      this.on( event, callback, true);
    },
    recalculateSize: function() {
      this.height = this.watchItem.offsetHeight + this.offsets.top + this.offsets.bottom;
      this.bottom = this.top + this.height;
    },
    update: function() {
      this.isAboveViewport = this.top < exports.viewportTop;
      this.isBelowViewport = this.bottom > exports.viewportBottom;

      this.isInViewport = (this.top <= exports.viewportBottom && this.bottom >= exports.viewportTop);
      this.isFullyInViewport = (this.top >= exports.viewportTop && this.bottom <= exports.viewportBottom) ||
                 (this.isAboveViewport && this.isBelowViewport);

    },
    destroy: function() {
      var index = watchers.indexOf(this),
        self  = this;
      watchers.splice(index, 1);
      for (var i = 0, j = eventTypes.length; i < j; i++) {
        self.callbacks[eventTypes[i]].length = 0;
      }
    },
    // prevent recalculating the element location
    lock: function() {
      this.locked = true;
    },
    unlock: function() {
      this.locked = false;
    }
  };

  var eventHandlerFactory = function (type) {
    return function( callback, isOne ) {
      this.on.call(this, type, callback, isOne);
    };
  };

  for (var i = 0, j = eventTypes.length; i < j; i++) {
    var type =  eventTypes[i];
    ElementWatcher.prototype[type] = eventHandlerFactory(type);
  }

  try {
    calculateViewport();
  } catch (e) {
    try {
      window.$(calculateViewport);
    } catch (e) {
      throw new Error('If you must put scrollMonitor in the <head>, you must use jQuery.');
    }
  }

  function scrollMonitorListener(event) {
    latestEvent = event;
    calculateViewport();
    updateAndTriggerWatchers();
  }

  if (window.addEventListener) {
    window.addEventListener('scroll', scrollMonitorListener);
    window.addEventListener('resize', debouncedRecalcuateAndTrigger);
  } else {
    // Old IE support
    window.attachEvent('onscroll', scrollMonitorListener);
    window.attachEvent('onresize', debouncedRecalcuateAndTrigger);
  }

  exports.beget = exports.create = function( element, offsets ) {
    if (typeof element === 'string') {
      element = document.querySelector(element);
    } else if (element && element.length > 0) {
      element = element[0];
    }

    var watcher = new ElementWatcher( element, offsets );
    watchers.push(watcher);
    watcher.update();
    return watcher;
  };

  exports.update = function() {
    latestEvent = null;
    calculateViewport();
    updateAndTriggerWatchers();
  };
  exports.recalculateLocations = function() {
    exports.documentHeight = 0;
    exports.update();
  };

  return exports;
});

!function(n,r){"function"==typeof define&&define.amd?define(r):"object"==typeof exports?module.exports=r():n.transformicons=r()}(this||window,function(){"use strict";var n={},r="tcon-transform",t={transform:["click"],revert:["click"]},e=function(n){return"string"==typeof n?Array.prototype.slice.call(document.querySelectorAll(n)):"undefined"==typeof n||n instanceof Array?n:[n]},o=function(n){return"string"==typeof n?n.toLowerCase().split(" "):n},f=function(n,r,f){var c=(f?"remove":"add")+"EventListener",u=e(n),s=u.length,a={};for(var l in t)a[l]=r&&r[l]?o(r[l]):t[l];for(;s--;)for(var d in a)for(var v=a[d].length;v--;)u[s][c](a[d][v],i)},i=function(r){n.toggle(r.currentTarget)};return n.add=function(r,t){return f(r,t),n},n.remove=function(r,t){return f(r,t,!0),n},n.transform=function(t){return e(t).forEach(function(n){n.classList.add(r)}),n},n.revert=function(t){return e(t).forEach(function(n){n.classList.remove(r)}),n},n.toggle=function(t){return e(t).forEach(function(t){n[t.classList.contains(r)?"revert":"transform"](t)}),n},n});
